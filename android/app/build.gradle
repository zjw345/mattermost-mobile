apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"

/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */

react {
    /* Folders */
    //   The root of your project, i.e. where "package.json" lives. Default is '../..'
    // root = file("../../")
    //   The folder where the react-native NPM package is. Default is ../../node_modules/react-native
    // reactNativeDir = file("../../node_modules/react-native")
    //   The folder where the react-native Codegen package is. Default is ../../node_modules/@react-native/codegen
    // codegenDir = file("../../node_modules/@react-native/codegen")
    //   The cli.js file which is the React Native CLI entrypoint. Default is ../../node_modules/react-native/cli.js
    // cliFile = file("../../node_modules/react-native/cli.js")
    /* Variants */
    //
    //   The list of variants that are debuggable. By default is just 'debug'.
    // debuggableVariants = ["liteDebug", "prodDebug"]
    /* Bundling */
    //   A list containing the node command and its flags. Default is just 'node'.
    // extraPackagerArgs = []
    /* Hermes Commands */
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    // hermesFlags = ["-O", "-output-source-map"]

    /* Autolinking */
    autolinkLibrariesWithApp()
}

apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"

if (System.getenv("SENTRY_ENABLED") == "true") {
    project.ext.sentryCli = [
        logLevel: "error",
        flavorAware: false
    ]
    apply from: "../../node_modules/@sentry/react-native/sentry.gradle"
}

/**
 * Set this to true to create four separate APKs instead of one,
 * one for each native architecture.
 */
def enableSeparateBuildPerCPUArchitecture = project.hasProperty('separateApk') ? project.property('separateApk').toBoolean() : false

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
def enableProguardInReleaseBuilds = false

/**
 * The preferred build flavor of JavaScriptCore (JSC)
 */
def jscFlavor = 'org.webkit:android-jsc-intl:+'

/**
 * Private function to get the list of Native Architectures you want to build.
 */
def reactNativeArchitectures() {
    def value = project.getProperties().get("reactNativeArchitectures")
    return value ? value.split(",") : ["armeabi-v7a", "x86", "x86_64", "arm64-v8a"]
}

android {
    ndkVersion rootProject.ext.ndkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdkVersion rootProject.ext.compileSdkVersion
    namespace "com.mattermost.rnbeta"

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    defaultConfig {
        applicationId "com.mattermost.rnbeta"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 620
        versionName "2.26.2"
        testBuildType System.getProperty('testBuildType', 'debug')
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

        // ====== 极光推送 插件占位符 ======
        manifestPlaceholders = [
            JPUSH_PKGNAME : applicationId,
            JPUSH_APPKEY  : "fd406821630128b4d55d3329",
            JPUSH_CHANNEL : "developer-default",
            MEIZU_APPKEY  : "",
            MEIZU_APPID   : "",
            XIAOMI_APPID  : "",
            XIAOMI_APPKEY : "",
            OPPO_APPKEY   : "",
            OPPO_APPID    : "",
            OPPO_APPSECRET: "",
            VIVO_APPKEY   : "",
            VIVO_APPID    : ""
        ]
        // =====================================
    }

    signingConfigs {
        release {
            if (project.hasProperty('MATTERMOST_RELEASE_STORE_FILE')) {
                storeFile file(MATTERMOST_RELEASE_STORE_FILE)
                storePassword MATTERMOST_RELEASE_PASSWORD
                keyAlias MATTERMOST_RELEASE_KEY_ALIAS
                keyPassword MATTERMOST_RELEASE_PASSWORD
            }
        }
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }

    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk enableSeparateBuildPerCPUArchitecture
            include(*reactNativeArchitectures())
        }
    }

    buildTypes {
        def useReleaseKey = project.hasProperty('MATTERMOST_RELEASE_STORE_FILE')
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            proguardFile "${rootProject.projectDir}/../node_modules/detox/android/detox/proguard-rules-app.pro"
            signingConfig useReleaseKey ? signingConfigs.release : signingConfigs.debug
        }
        debug {
            signingConfig useReleaseKey ? signingConfigs.release : signingConfigs.debug
        }
        unsigned.initWith(buildTypes.release)
        unsigned {
            signingConfig null
            matchingFallbacks = ['release']
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def versionCodes = ["armeabi-v7a":1, "x86":2, "arm64-v8a": 3, "x86_64": 4]
            def abi = output.filters[0]
            if (abi != null) {
                output.versionCodeOverride =
                    versionCodes.get(abi.identifier) * 2000000 + defaultConfig.versionCode
            }
        }
    }
}

repositories {
    maven { url 'https://maven.google.com' }
    maven { url 'https://jitpack.io' }
}

dependencies {
    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }

    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.1'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.12.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation "com.google.firebase:firebase-messaging:$firebaseVersion"
    androidTestImplementation('com.wix:detox:+')
    androidTestImplementation 'androidx.test:core:1.6.0'
    androidTestImplementation 'androidx.test:runner:1.5.2'
    androidTestImplementation 'com.wix:detox:20.26.2'

    implementation project(':reactnativenotifications')
    implementation project(':watermelondb-jsi')

    api('io.jsonwebtoken:jjwt-api:0.12.5')
    runtimeOnly('io.jsonwebtoken:jjwt-impl:0.12.5')
    runtimeOnly('io.jsonwebtoken:jjwt-orgjson:0.12.5') {
        exclude(group: 'org.json', module: 'json')
    }

    // ====== 极光推送 SDK 及厂商通道依赖（按需启用） ======
    implementation 'cn.jiguang.sdk:jpush:5.5.3'
    // 华为推送通道
    implementation 'com.huawei.hms:push:6.12.0.300'
    implementation 'cn.jiguang.sdk.plugin:huawei:5.5.3'
    // FCM 推送通道
    implementation 'cn.jiguang.sdk.plugin:fcm:5.5.3'
    // 魅族推送通道
    implementation 'cn.jiguang.sdk.plugin:meizu:5.5.3'
    // VIVO 推送通道
    implementation 'cn.jiguang.sdk.plugin:vivo:5.5.3.a'
    // OPPO 推送通道
    implementation 'cn.jiguang.sdk.plugin:oppo:5.5.3'
    // 小米推送通道
    implementation 'cn.jiguang.sdk.plugin:xiaomi:5.5.3'
    // ===============================================

    // 其他第三方依赖保持不变
}

configurations.all {
    resolutionStrategy {
        force 'androidx.test:core:1.6.0'
        eachDependency { DependencyResolveDetails details ->
            if (details.requested.name == 'play-services-base') {
                details.useTarget group: details.requested.group, name: details.requested.name, version: '18.2.0'
            }
            if (details.requested.name == 'play-services-tasks') {
                details.useTarget group: details.requested.group, name: details.requested.name, version: '18.0.2'
            }
            if (details.requested.name == 'play-services-basement') {
                details.useTarget group: details.requested.group, name: details.requested.name, version: '18.2.0'
            }
            if (details.requested.name == 'okhttp') {
                details.useTarget group: details.requested.group, name: details.requested.name, version: '4.12.0'
            }
            if (details.requested.name == 'okhttp-tls') {
                details.useTarget group: details.requested.group, name: details.requested.name, version: '4.12.0'
            }
            if (details.requested.name == 'okhttp-urlconnection') {
                details.useTarget group: details.requested.group, name: details.requested.name, version: '4.12.0'
            }
        }
    }
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
tasks.register('copyDownloadableDepsToLibs', Copy) {
    from configurations.implementation
    into 'libs'
}

// 保留原有 FCM 插件应用
apply plugin: 'com.google.gms.google-services'
// 新增 HMS 插件应用
apply plugin: 'com.huawei.agconnect'
